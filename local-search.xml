<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>二分算法--第K 小/大</title>
    <link href="/2024/08/27/post/"/>
    <url>/2024/08/27/post/</url>
    
    <content type="html"><![CDATA[<h1 id="二分算法–第K-小-大"><a href="#二分算法–第K-小-大" class="headerlink" title="二分算法–第K 小&#x2F;大"></a>二分算法–第K 小&#x2F;大</h1><ul><li><h3 id="有序矩阵中第-K-小的元素"><a href="#有序矩阵中第-K-小的元素" class="headerlink" title="有序矩阵中第 K 小的元素"></a>有序矩阵中第 K 小的元素</h3></li></ul><blockquote><p>给你一个<code>n*n</code>矩阵<code>matrix</code>，其中每行和每列元素均按升序排序，找到矩阵中第<code>k</code>小的元素。<br>请注意，它是<strong>排序后</strong>的第<code>k</code>小元素，而不是第<code>k</code>个<strong>不同</strong>的元素。<br>你必须找到一个内存复杂度优于$O(n^2)$的解决方案。</p></blockquote><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>矩阵最左上角为最小值，最右下角为最大值，我们在此范围内进行二分搜索，取中间数mid，然后在每行中查找mid，这里使用upper_bound函数找到第一个大于mid的元素的位置，然后减去该行的起始位置，就得到了该行中小于或等于mid的元素个数。根据计数器cnt的值来调整搜索范围。如果cnt小于 k，说明第 k 小的元素在 mid 的右侧，所以更新 left为mid + 1；否则，说明第 k 小的元素在 mid 或其左侧，更新 right 为 mid。当循环结束时，left和right 相等，此时lef（或right）就是第k小的元素，返回这个值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">kthSmallest</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; matrix, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-type">int</span> left = matrix[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] , right = matrix.<span class="hljs-built_in">back</span>().<span class="hljs-built_in">back</span>();<br>        <span class="hljs-keyword">while</span> (left &lt; right)&#123;<br>            <span class="hljs-type">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>, cnt = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>; i&lt;matrix.<span class="hljs-built_in">size</span>();++i)&#123;<br>                cnt += <span class="hljs-built_in">upper_bound</span>(matrix[i].<span class="hljs-built_in">begin</span>(),matrix[i].<span class="hljs-built_in">end</span>(),mid) - matrix[i].<span class="hljs-built_in">begin</span>();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (cnt &lt; k) left=mid + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> right = mid;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><h3 id="阶乘函数后-K-个零"><a href="#阶乘函数后-K-个零" class="headerlink" title="阶乘函数后 K 个零"></a>阶乘函数后 K 个零</h3></li></ul><blockquote><p><code>f(x)</code> 是 <code>x!</code>末尾是0的数量。回想一下<code>x! = 1 * 2 * 3 * ... * x</code>，且<code>0! = 1</code>。</p><ul><li>例如，<code>f(3) = 0</code>，因为<code>3! = 6</code>的末尾没有0；而<code>f(11) = 2</code>，因为<code>11!= 39916800</code>末端有2个0。</li></ul></blockquote><blockquote><p>给定<code>k</code>，找出返回能满足<code>f(x) = k</code>的非负整数<code>x</code>的数量。</p></blockquote><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>若要求阶乘尾数中0的个数，我们首先要搞清楚末尾的0是从何而来？<br>假设取7的阶乘，即：<br>$$<br>7!&#x3D;7\times6\times5\times4\times3\times2\times1&#x3D;7\times(3\times2)\times5\times(2\times2)\times3\times2\times1<br>$$<br>那么我们不难发现，0的产生是因为2×5得来的，即：每有一组2和5，便会产生一个0。<br>而且我们还可以发现这样一个事实：2的个数明显要多于5的个数。所以我们可以将问题转化，因子5的个数便是0的个数。</p><p>则问题变为：<strong>给定一个k，寻找含有k个因子5的y的个数。</strong></p><p>那么现在来看个数的问题，我们可以发现，当x从0开始增长，只有碰到5的倍数时，才会增加因子5的个数，即：本题答案要么为5要么为0。</p><p>其实转化一下，这问题倒是个常见的数学问题，翻译过来就是当x慢慢增长时，每逢遇到一个$5^n$便加一。因此公式就变成了如下：<br>$$<br>f(y)&#x3D;y+\frac{y}{5^1}+\frac{y}{5^2}+\frac{y}{5^3}+\frac{y}{5^4}+……<br>$$<br>所以，最终问题就变成了寻找一个y满足上面等式。</p><p>那这种情况显然是二分最为合适，毕竟我们知道当这个数特别大时，它是靠近k的，如果从0开始增长，那么会浪费很多时间，如果用二分优势就会很明显了。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs excel">class Solution &#123;<br>publ<span class="hljs-symbol">ic:</span><br>    <span class="hljs-built_in">int</span> preimageSizeFZF(<span class="hljs-built_in">int</span> k) &#123;<br>        <span class="hljs-built_in">int</span> <span class="hljs-built_in">left</span> = <span class="hljs-number">0</span>, <span class="hljs-built_in">right</span> = k;<br>        while (<span class="hljs-built_in">left</span> &lt;= <span class="hljs-built_in">right</span>) &#123;<br>            <span class="hljs-built_in">int</span> <span class="hljs-built_in">mid</span> = <span class="hljs-built_in">left</span> +(<span class="hljs-built_in">right</span> - <span class="hljs-built_in">left</span>) / <span class="hljs-number">2</span>;<br>            <span class="hljs-built_in">int</span> basic = <span class="hljs-built_in">mid</span>;<br>            for (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">14</span>; i++) basic += (<span class="hljs-built_in">mid</span> / pow(<span class="hljs-number">5</span>,i));<br>            <span class="hljs-built_in">if</span> (basic == k) return <span class="hljs-number">5</span>; <br>            <span class="hljs-built_in">if</span> (basic &lt; k) <span class="hljs-built_in">left</span> = <span class="hljs-built_in">mid</span> + <span class="hljs-number">1</span>;<br>            else <span class="hljs-built_in">right</span> = <span class="hljs-built_in">mid</span> - <span class="hljs-number">1</span>;<br>        &#125;<br>        return <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>二分算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/08/27/hello-world/"/>
    <url>/2024/08/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
